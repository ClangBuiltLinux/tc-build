Usage: ./build-llvm.sh [options]

Description: Fetchs LLVM and binutils then builds a LLVM, clang, lld, and the LLVMgold plugin.

Environment variables:
    The script can take into account specific environment variables. They can be
    invoked in one of three ways:
        $ export VAR=value && ./build-llvm.sh
        $ VAR=value ./build-llvm.sh
        $ ./build-llvm.sh VAR=value

    CC:
        Path to or name of the C compiler. If unset, the script will try to use
        clang if it is available, falling back to gcc if necessary.

    CXX:
        Path to or name of the C++ compiler. If unset, the script will use clang++
        if CC is clang or g++ if CC is gcc.

    LD:
        Path to or name of the linker. If unset and using clang, the script will
        attempt to find ld.lld then ld.gold, falling back to ld.bfd (because they
        are objectively faster).

Parameters:
    -b | --branch:
        By default, the script builds the master branch (tip of tree) of LLVM. If you would
        like to build an older branch, use this parameter. This may be helpful in tracking
        down an older bug to properly bisect. This value is just passed along to 'git checkout'
        so it can be a branch name, tag name, or hash.

        NOTE: Some of the cmake defines may not work on older branches!

        Example: -b release/8.x

    -d | --debug:
        By default, the script builds LLVM in the release configuration with all of
        the tests turned off and optimization at O2. This disables that optimization,
        builds the tests, and changes the configuration to debug. This can help with
        reporting problems to LLVM developers but will make compilation of both LLVM
        and the kernel go slower.

    -i | --incremental:
        By default, the script removes all build artifacts from previous compiles. This
        prevents that, allowing for dirty builds and faster compiles.

    -I | --install-folder:
        By default, the script will create a "usr" folder in the same folder as this script
        and install the LLVM toolchain there. If you'd like to have it installed somewhere
        else, pass it to this parameter. This can either be an absolute or relative path.

        Example: -I ~/llvm

    -n | --no-pull:
        By default, the script always updates the LLVM repo before building. This prevents
        that, which can be helpful during something like bisecting.

    -p | --projects:
        Currently, the script only enables the clang, compiler-rt, and lld folders in LLVM. If
        you would like to override this, you can use this parameter and supply a list that is
        supported by LLVM_ENABLE_PROJECTS.

        See step #5 here: https://llvm.org/docs/GettingStarted.html#getting-started-quickly-a-summary

        Example: -p "clang;lld;libcxx"

    -t | --targets:
        LLVM is multitargeted by default. Currently, this script only enables the arm32, aarch64,
        powerpc, and x86 backends because that's what the Linux kernel is currently concerned with.
        If you would like to override this, you can use this parameter and supply a list that is
        supported by LLVM_TARGETS_TO_BUILD: https://llvm.org/docs/CMake.html#llvm-specific-variables

        Example: -t "AArch64;X86"
